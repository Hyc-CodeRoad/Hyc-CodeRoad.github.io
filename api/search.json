[{"id":"af912e0d33a827f03582ef107fe8a87d","title":"SpringBoot","content":"‍\n","slug":"Java/Java框架/SpringBoot","date":"2023-01-12T02:51:46.000Z","categories_index":"","tags_index":"","author_index":"Hyc"},{"id":"9b79b6fb7568108556e9bc3e70a76e2d","title":"MyBatis-Plus","content":"‍\n","slug":"Java/Java框架/MyBatis-Plus","date":"2023-01-12T02:51:35.000Z","categories_index":"","tags_index":"","author_index":"Hyc"},{"id":"7a897380fbf2b52c7fdc533d413e1985","title":"MyBatis","content":"‍\n","slug":"Java/Java框架/MyBatis","date":"2023-01-12T02:51:24.000Z","categories_index":"","tags_index":"","author_index":"Hyc"},{"id":"cd53cdbf97b8f99c953dd3eda45eed25","title":"SpringMVC","content":"‍\n","slug":"Java/Java框架/SpringMVC","date":"2023-01-12T02:50:40.000Z","categories_index":"","tags_index":"","author_index":"Hyc"},{"id":"946249c65165e1a3d66f50e0cb6e89e7","title":"Spring","content":"Spring概述Spring是什么Spring是一款主流的Java EE轻量级开源框架，SO日你哥是由Spring之父Rod Johnson提出并创立的，其目的是用于简化Java企业级应用的开发难度和开发周期。Spring的用途不仅限于服务器端的开发。从简单性，可测试性和松耦合的角度而言，任何Java应用都可以从Spring中收益。Spring除了自己提供功能以外，还提供了整合其他技术和框架的能力。\nSpring有两个最核心的模块：IoC和AOP。\n\nIoC：控制反转，指把创建对象的过程交给Spring进行管理。\nAOP：面向切面编程，就是在很少改变系统原先代码的情况下增强系统的功能，如日志，事务，权限等\n\n‍\nSpring快速入门‍\n容器IoC‍\n手写IoC‍\n面向切面AOP‍\n单元测试 JUnit‍\n事务‍\n资源操作：Resources‍\n国际化： i18n‍\n数据校验：Validation‍\n提前编译： AOT","slug":"Java/Java框架/Spring","date":"2023-01-12T02:50:32.000Z","categories_index":"","tags_index":"","author_index":"Hyc"},{"id":"343b4705200b7b61e33bddb91085bc8e","title":"Oracle","content":"‍\n","slug":"数据库/关系型数据库/Oracle","date":"2023-01-12T02:50:10.000Z","categories_index":"","tags_index":"","author_index":"Hyc"},{"id":"838ae74e3a76757d637de803a615bfd9","title":"MySQL","content":"MySQL概述数据库相关概念\n数据库（DataBase，DB）\n存储数据的仓库，数据是有组织的进行存储的\n\n数据库管理系统（DataBase Management System，DBMS）\n操纵和管理数据库的大型软件\n\nSQL（Structured Query Lanuahge，SQL）\n操作关系型数据库的编程语言，定义了一套操作关系型数据库统一标准\n\n\n\n\n\n\n\n\n\n\n\n主流的关系型数据库管理系统：\n\nOracle\nMySQL\nMicrosoft SQL Server\nPostgreSQL\nIBM DB2\n\n‍\nMySQL数据库当前官方提供了两种不同的版本：社区版（免费，不提供任何技术支持）和商业版。\n‍\nMySQL环境搭建WindowsLinuxMac‍\n‍\nSQLSQL通用语法\nSQL语句可以单行或多行书写，以分号结尾\nSQL语句可以使用空格&#x2F;缩进来增强语句的可读性\nMySQL数据库的SQL语句不区分大小写，关键字建议使用大写\n\n注释-- 单行注释\n\n# 单行注释（MySQL特有）\n\n/*\n    多行注释\n*/\n\nSQL分类\nDDL（Data Definition Language）：数据定义语言，用来定义数据库对象（数据库，表，字段）\nDML（Data Manipulation Language）：数据操作语言，用来对数据库中的数据进行增删改\nDQL（Data Query Language）：数据查询语言，用来查询数据库中表的记录\nDCL（Data Control Langage）：数据控制语言，用来创建数据库用户，控制数据库的访问权限\n\nMySQL的数据类型MySQL中的数据类型主要分为：数值型，字符串类型，日期时间类型。\n数值类型\n\n\n类型\n大小\n有符号范围\n无符号范围\n描述\n\n\n\nTINYINT\n1byte\n\n\n小整数值\n\n\nSMALLINT\n2bytes\n\n\n大整数值\n\n\nMEDIUMINT\n3bytes\n\n\n大整数值\n\n\nINT或INTEGER\n4bytes\n\n\n大整数值\n\n\nBIGINT\n8bytes\n\n\n极大整数\n\n\nFLOAT\n4bytes\n\n\n单精度浮点数\n\n\nDOUBLE\n8bytes\n\n\n双精度浮点数\n\n\nDECIMAL\n\n\n\n小数值（精度定点数）\n\n\n字符串类型\n\n\n类型\n大小\n描述\n\n\n\nCHAR\n\n定长字符串\n\n\nVARCHAR\n\n变长字符串，存储空间在指定范围内会根据你输入的值变化\n\n\nTINYBLOB\n\n不超过255个字符的二进制数据\n\n\nTINYTEXT\n\n短文本字符串\n\n\nBLOB\n\n二进制形式的长文本数据\n\n\nTEXT\n\n长文本数据\n\n\nMEDIUMBLOB\n\n二进制形式的中等长度文本数据\n\n\nMEDIUMTEXT\n\n中等长度文本数据\n\n\nLONGBLOB\n\n二进制形式的极大文本数据\n\n\nLONGTEXT\n\n极大文本数据\n\n\n日期时间类型\n\n\n类型\n大小\n格式\n描述\n\n\n\nDATE\n\nYYYY-MM-DD\n日期值\n\n\nTIME\n\nHH:MM:SS\n时间值或持续时间\n\n\nYEAR\n\nYYYY\n年份值\n\n\nDATETIME\n\nYYYY-MM-DD HH:MM:SS\n混合日期和时间值\n\n\nTIMESTAMP\n\nYYYY-MM-DD HH:MM:SS\n混合日期和时间值，时间戳\n\n\nDDL数据库操作查询所有数据库-- 查询所有数据库\nSHOW DATABASES;\n\n创建数据库-- 创建数据库\nCREATE DATABASE [IF NOT EXISTS] 数据库名 [DEFAULT CHARSET 字符集][COLLATE 排序规则];\n\n-- 如果数据库不存在则创建，存在则不创建\nCREATE DATABASE IF NOT EXISTS test01;\n\n删除数据库-- 删除数据库\nDROP DATABASE 数据库名;\n\nDROP DATABASE test01;\n\n使用数据库需要选中指定数据库后，才能操作数据库中的表。\n-- 使用数据库\nUSE 数据库名;\n\nUSE test01;\n\n查询当前数据库当数据库频繁切换时，不知道当前数据库是哪个时，可以使用该命令。\n-- 查询当前数据库\nSELECT DATABASE();\n\n表操作查询当前数据库所有的表需要执行USE​命令以后才能使用当前命令，不然会报错。\n-- 查询当前数据库所有表\nSHOW TABLES;\n\n创建表-- 创建表\nCREATE TABLE 表名(\n    字段1 字段1类型 [COMMENT 字段1注释],\n    字段2 字段2类型 [COMMENT 字段2注释],\n    ...\n    字段n 字段n类型 [COMMENT 字段n注释]\n)[COMMENT 表注释];\n\n\nCREATE TABLE user(\n\tid INT COMMENT 'id',\n\tuname VARCHAR(20) COMMENT '用户名',\n\tpwd VARCHAR(20) COMMENT '密码',\n\tage INT COMMENT '年龄'\n\n) COMMENT '用户表';\n\n\n最后一个字段后不要写逗号，不然报错。\n\n查询表结构-- 查询表结构\nDESC 表名;\n\nDESC user;\n\n查询指定表的建表语句-- 查询指定表的建表语句\nSHOW CREATE TABLE 表名;\n\nSHOW CREATE TABLE user;\n\n添加表中字段-- 添加表中字段\nALTER TABLE 表名 ADD 字段名 数据类型 [COMMENT '性别'][约束];\n\nALTER TABLE user ADD sex VARCHAR(1) COMMENT '性别';\n\n修改字段类型-- 修改字段数据类型\nALTER TABLE 表名 MODIFY 字段名 新数据类型;\n\nALTER TABLE user MODIFY uname VARCHAR(30);\n\n修改字段名和字段类型-- 修改字段名和字段类型\nALTER TABLE 表名 CHANGE 旧字段名 新字段名 数据类型[comment 注释][约束];\n\nALTER TABLE user CHANGE uname username VARCHAR(20);\n\n删除字段-- 删除字段\nALTER TABLE 表名 DROP 字段名;\n\nALTER TABLE user DROP sex;\n\n修改表名-- 修改表名\nALTER TABLE 表名 RENAME TO 新表名;\n\nALTER TABLE user RENAME TO t_user;\n\n删除表-- 删除表\nDROP TABLE [IF EXISTS] 表名;\n\nDROP TABLE IF EXISTS t_user;\n\n删除指定表，并重新创建该表-- 删除表并重新创建该表\nTRUNCATE TABLE 表名;\nTRUNCATE TABLE user;\n\nDML数据操作语言，对数据库中表的数据记录进行增删改操作。\n添加数据-- 给指定字段添加数据\nINSERT INTO 表名(字段1,字段2,...) VALUES(值1,值2,...);\n\nINSERT INTO user(id,uname,pwd) VALUES(1,'zs','zs123456');\n\n-- 给全部字段添加数据\nINSERT INTO 表名 VALUES(值1,值2,...);\n\nINSERT INTO user VALUES(2,'ls','ls123456',18);\n\n-- 批量添加数据\nINSERT INTO 表名(字段1,字段2,...) VALUES(值1,值2,...),(值1,值2,...),...;\nINSERT INTO 表名 VALUES(值1,值2,...),(值1,值2,...),...;\n\nINSERT INTO user VALUES(3,'java','java123456',10),(4,'python','python123456',5);\n\n\n插入数据时，指定的字段顺序需要与值的顺序一一对应\n字符串和日期型数据应该写在引号当中\n插入的数据大小，应该在字段的规定范围内\n\n修改数据-- 修改数据\nUPDATE 表名 SET 字段名1=值1,字段名2=值2,... [where 条件];\n\n-- 修改id为2的数据\nUPDATE user SET age=24 WHERE id=2;\n\n\n如果没有where条件会修改全部数据\n\n删除数据DELETE FROM 表名 [where 条件];\n\n-- 删除id为2的数据\nDELETE FROM user WHERE id=2;\n\n\n如果没有where条件会删除所有数据\nDELETE语句不能删除指定字段的值，可以使用UPDATE把值修改为空\n\nDQL数据查询语言，用来查询数据库中的表的记录。\n完整语法SELECT\n    字段列表\nFROM\n    表名列表\nWHERE\n    条件列表\nGROUP BY\n    分组字段列表\nHAVING\n    分组后条件列表\nORDER BY\n    排序字段列表\nLIMIT\n    分页参数  \n\n基础查询-- 查询返回多个字段\nSELECT 字段1,字段2,字段3,... FROM 表名;\n\n-- 查询全部字段\nSELECT * FROM 表名;\n\n-- 设置别名\nSELECT 字段1[AS 别名1],字段2[AS 别名2],字段3[AS 别名3],... FROM 表名;\n\nSELECT uname AS '用户名', age AS '年龄' FROM user;\nSELECT uname '用户名', age '年龄' FROM user;\n\n\n去重查询AS可以省略，但是不建议省略\n不推荐使用*来查询全部字段，会影响效率，并且可读性不好\n\n去重查询SELECT DISTINCT 字段列表 FROM 表名;\n\n运算符比较运算符\n\n\n符号\n含义\n\n\n\n&gt;\n大于\n\n\n&gt;&#x3D;\n大于等于\n\n\n&lt;\n小于\n\n\n&lt;&#x3D;\n小于等于\n\n\n&#x3D;\n等于\n\n\n&lt;&gt;或!&#x3D;\n不等于\n\n\nBETWEEN…AND…\n在某个范围之内（包含最小，最大值），小的数在前\n\n\nIN(…)\n在IN之后的列表值之一\n\n\nLIKE 占位符\n模糊匹配（_匹配单个字符，%匹配任意字符）\n\n\nIS NULL\n是NULL\n\n\n逻辑运算符\n\n\n符号\n含义\n\n\n\nAND或&amp;&amp;\n并且\n\n\nOR或||\n或者\n\n\nNOT或!\n非\n\n\n条件查询-- 基本语法\nSELECT 字段列表 FROM 表名 WHERE 条件列表;\n\n聚合函数分组查询时通常要搭配聚合函数来使用。聚合函数就是将一列数据作为一个整体，进行纵向计算。\n\n\n\n函数\n作用\n\n\n\ncount\n统计数量\n\n\nmax\n最大值\n\n\nmin\n最小值\n\n\navg\n平均值\n\n\nsum\n求和\n\n\n-- 基础语法\nSELECT 聚合函数(字段列表) FROM 表名;\n\nSELECT count(*) FROM 表名;\nSELECT count(id) FROM 表名;\n\n\nnull值不参与聚合函数的计算，包括统计数量\n\n分组查询-- 分组查询\nSELECT 字段列表 FROM 表名 [WHERE 条件] GROUP BY 分组字段名 [HAVING 分组后过滤条件];\n\n\n\n\n\n\n\n\n\n\nwhere和having的区别：\n\nwhere是分组前进行过滤，不满足where条件的不参与分组。而having是分组之后对结果进行过滤。\nwhere不能对聚合函数进行判断，而having可以。\n\n\n分组函数一般为聚合函数和分组字段，查询其他字段无任何意义\n\n排序查询排序方式只有两种：ASC（升序，默认）和DESC（降序）\n-- 排序查询\nSELECT 字段列表 FROM 表名 [WHERE 条件] ORDER BY 排序字段 排序方式1,排序字段2 排序方式2;\n\n\n如果多个字段参与排序，当第一个字段值相同时，才会根据第二个字段进行排序。\n\n分页查询-- 分页查询\nSELECT 字段列表 FROM 表名 LIMIT 起始索引,查询数据记录;\n\n\n起始索引从0开始，起始索引&#x3D;（查询页码-1） * 每页显示记录数\n分页查询是数据库的方言，不同的数据库有不同的实现，MySQL中式LIMIT\n如果查询的是第一页数据，起始索引可以省略直接简写成LIMIT 10\n\nDCL‍\n函数‍\n约束‍\n多表查询‍\n事务‍\n存储引擎MySQL体系结构​​\n\n连接层\n最上层是一些客户端和链接服务，主要完成一些类似于连接处理，授权认证，及相关的安全方案。服务器也会为安全接入的每个客户端验证它所具有的操作权限。\n\n服务层\n服务层主要完成大多数的核心功能，如SQL接口，并完成缓存的查询，SQL的分析和优化，部分内置函数的执行。所有跨存储引擎的功能也在这一层实现，如过程，函数等。\n\n引擎层\n存储引擎真正的负责了MySQL中数据的存储和提取，服务器通过API和存储引擎通信。不同的存储引擎具不同的功能，这样我们可以根据自己的需要，来选择合适的存储因引擎。\n\n存储层\n主要是将数据存储再文件系统之上，并完成与存储引擎的交互。\n\n\n存储引擎简介存储引擎就是存储数据，建立索引，更新&#x2F;查询数据等技术的实现方式。存储引擎是基于表的，而不是基于库的，所以存储引擎也可以称为表类型。\n‍\n存储引擎特点‍\n‍\n‍\n‍\n","slug":"数据库/关系型数据库/MySQL","date":"2023-01-12T02:49:56.000Z","categories_index":"","tags_index":"","author_index":"Hyc"},{"id":"9b69dffe0262764ac691bc95bc415c22","title":"Python基础","content":"‍\n‍\n","slug":"Python/Python基础","date":"2022-01-09T16:00:00.000Z","categories_index":"Python","tags_index":"Python","author_index":"Hyc"},{"id":"33e145189cb2c9be32b78fb749fd41d4","title":"Python爬虫","content":"‍\n‍\n","slug":"Python/Python爬虫","date":"2022-01-09T16:00:00.000Z","categories_index":"Python","tags_index":"Python","author_index":"Hyc"},{"id":"a48e6dda0c21e40880cba7e763278b04","title":"Docker","content":"‍\n","slug":"运维/Docker","date":"2022-01-09T16:00:00.000Z","categories_index":"运维","tags_index":"运维","author_index":"Hyc"},{"id":"8c6c59136f9c0c8c29b87ea646eed9d1","title":"操作系统","content":"‍\n","slug":"计算机专业课/操作系统","date":"2019-06-19T16:00:00.000Z","categories_index":"计算机专业课","tags_index":"编程四大件","author_index":"Hyc"},{"id":"eb194f41cb36b6fda6721d8affe1bb49","title":"数据结构和算法","content":"程序 &#x3D; 数据结构 + 算法\n数据结构绪论数据结构：是相互之间存在一种或多种特定关系的数据元素的集合。\n数据结构概述早期计算机主要用于数值运算，只要得到数学方程即可。随着计算机的发展，计算机越来越多的应用于非数值计算，就需要从具体问题中抽象出数据模型，设计出此数据模型的算法，在编写程序。\n数据结构是一门研究非数值计算的程序设计问题中的操作对象，以及它们之间的关系和操作等相关问题的学科。\n基本概念和术语数据数据是描述客观事物的符号，是计算机中可以操作的对象，是能被计算机识别，并输入到计算机处理的符号集合。数据不仅仅包括整型，实数等数值类型，号包括声音，图像，视频等非数值类型。\n数据需要具备两个前提：\n\n可以输入到计算机中\n可以被计算机程序处理\n\n数据元素数据元素是组成数据的，有一定意义的基本单位。在计算机中通常作为整体处理。也被称为记录。\n数据项一个数据元素可以由若干个数据项组成。数据项是数据不可分割的最小单位。\n数据对象数据对象是性质相同的数据元素的集合，是数据的子集。\n数据结构结构，简单的理解就是关系。不同数据元素之间不是独立的，而是存在特定关系的，我们将这些关系称为结构。\n数据结构就是相互之间存在一种或多种特定关系的数据元素的集合。\n在计算机中，数据元素并不是孤立，杂乱无序的，而是具有内在联系的数据集合。数据元素之间存在一种或多种特定关系，也就是数据的组织形式。\n‍\n逻辑结构与物理结构逻辑结构逻辑结构是指数据对象中元素之间的相互关系。逻辑结构分为以下四种：\n\n集合结构\n 集合结构：集合结构中的数据元素除了同属于一个集合外，它们之间没有其他关系。\n\n线性结构\n 线性结构：线性结构中的数据元素之间是一对一的关系。\n\n树形结构\n 树形结构：树型结构中的数据元素之间存在一种一对多的层次关系。\n\n图形结构\n 图形结构：图形结构的数据元素是多对多的关系。\n\n\n‍\n物理结构物理结构是指数据的逻辑结构在计算机中的存储形式（在很多书中也叫存储结构）。\n数据元素的存储结构形式有两种：顺序存储和链式存储：\n\n顺序存储结构\n 顺序存储结构：是把数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一样的。\n 顺序存储结构可以理解为排队占位，每个人占一小块空间，谁也不能插队。\n\n链式存储结构\n 在实际排队中，总会有人插队，有人放弃排队，在这种时常要变化的情况下，顺序存储是不科学的。\n 链式存储结构：是把数据元素存放在任意的存储单元里，这组存储单元可以是连续的，也可以是不连续的。\n 数据元素存储的关系并不能反映其逻辑关系，因此需要一个指针来存放数据元素的地址，这样就可以通过地址来找到相关联数据元素的位置。\n\n\n‍\n抽象数据类型数据类型数据类型是指一组性质相同的值的集合以及定义在此集合上的一些操作的总称。\n抽象数据类型抽象数据类型（Abstract Data Type，ADT）：是指一个数学模型以及定义在该模型上的一组操作。\n抽象的意义在于数据类型的数学抽象特性。抽象数据类型体现了程序中问题分解，抽象和信息隐藏的特性。\n‍\n算法绪论算法是解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列，并且每条指令表示一个或多个操作。\n‍\n算法的特性算法具有五个基本特性：输入，输出，有穷性，确定性和可行性。\n输入输出算法具有零个或多个输入。算法至少有一个或多个输入。如果没有输出，这个算法就毫无意义。\n有穷性有穷性指算法在执行有限的步骤之后，自动结束而不会出现无限循环，并且每个步骤在可接受的时间内完成。\n确定性算法的每一步骤都具有确定的含义，不会出现二义性。算法在一定的条件下，只有一条执行路径，相同的输入只能有唯一的输出结果。\n可行性算法的每一步必须是可行的，每一步都能够通过执行有限次数完成。\n‍\n算法的设计要求算法不是唯一的，解决同一问题可以有多种算法。多种算法中会有相对较好的算法。\n好的算法所具有的特征：正确性，可读性，健壮性，高效率和低存储量。\n正确性算法的正确性是指算法执行应该具有输入，输出和加工处理无歧义性，能正确反映问题的需求，能够得到问题的正确答案。\n算法的正确大体分为以下四个层次：\n\n算法的程序没有语法错误\n算法程序对于合法的输入数据能够产生满足要求的输出结果\n算法程序对于非法的输入数据能够得出满足规格说明的结果\n算法程序对于精心选择的，甚至刁难的测试数据都有满足要求的输出结果\n\n可读性算法设计的另一目的是为了便于阅读，理解和交流。可读性有助于人们理解算法，晦涩难懂的算法往往隐含错误，不易被发现，并且难于调试和修改。\n健壮性当输入数据不合法时，算法也能做出相关处理，而不是产生异常或者莫名其妙的结果。\n时间效率高和存储量低对于同一个问题，如果有多个算法可以解决，执行时间短的算法效率高，不然反之。存储量需求指的是算法在执行过程中所需要的最大存储空间，主要指算法运行过程中所需要的内存或外部硬盘存储空间。\n‍\n算法效率的度量方法‍\n‍\n函数的渐近增长‍\n算法时间复杂度‍\n‍\n常见的时间复杂度‍\n最坏情况与平均情况‍\n算法空间复杂度‍\n线性表零个或多个数据元素的有限序列。\n线性表的定义‍\n‍\n","slug":"计算机专业课/数据结构和算法","date":"2019-06-19T16:00:00.000Z","categories_index":"计算机专业课","tags_index":"编程四大件","author_index":"Hyc"},{"id":"293c17b4d2a4292133cc4d1ffd7f8725","title":"计算机网络","content":"‍\n","slug":"计算机专业课/计算机网络","date":"2019-06-19T16:00:00.000Z","categories_index":"计算机专业课","tags_index":"编程四大件","author_index":"Hyc"},{"id":"deffdaaa2a24a19ee257667b3b36743c","title":"设计模式","content":"设计模式概述软件设计模式，又称设计模式，是一套被反复使用，多输入知晓的，经过分类编目的，代码设计经验的总结。它描述了在软件设计过程中的一些不断重复发生的问题，以及该问题的解决方案。也就是说，它是解决特定问题的一系列套路，是前辈们的代码设计经验的总结，具有一定的普遍性，可以反复使用。\n设计模式背景设计模式最初并不是出现在软件设计中，而是用于建筑领域中。\n1990年，软件工程界开始研讨设计模式。直到1995年，艾瑞克·伽马、理查德·海尔姆、拉尔夫·约翰森、约翰·威利斯迪斯等4位作者合作出版了《设计模式：可复用面向对象软件的基础》一书，此书中收入了23个设计模式。\n‍\n设计模式的作用设计模式的本质是面向对象设计原则的实际运用，是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解。\n\n学习设计模式可以提高程序员思维能力，编程能力和设计能力\n设计模式可以使程序设计更加标准化，代码编制更加工程化，使软件开发效率大大提高，从而缩短软件的开发周期\n使设计的代码可重用性更高、可读性强、可靠性高、灵活性好、可维护性强\n\n‍\n设计模式分类\n创建型模式\n用于描述怎样创建对象，它的主要特点是将对象的创建和使用分离。设计模式的书中提供了单例、原型、工厂方法，抽象工厂、建造者等5种创建型模式。\n\n结构型模式\n用于描述如果将类或对象按某种布局组成更大的结构，书中提供了代理、适配器、桥接、装饰、外观、享元、组合等7种结构型模式。\n\n行为模式\n用于描述类或对象之间怎样相互协作共同完成单个对象无法单独完成的任务，以及怎样分配职责。书中提供了模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器等11种行为型模型。\n\n\n‍\nUML图（主要学习类图）统一建模语言，是用来设计软件的可视化建模语言。它的特点是简单、统一、图形化、能表达软件设计中的动态与静态信息。\nUML从目标系统的不同角度出发，定义了用例图、类图、对象图、状态图、活动图、时序图、协作图、构建图、部署图等9中图。\n‍\n类图概述类图是显示了模型的静态结构，特别是模型中存在的类，类的内部结构以及它们与其他类的关系等。类图不显示暂时性的信息。类图是面向对象建模的主要组成部分。\n\n在软件工程中，类图是一种静态的结构图，描述了系统的类的集合，类的属性和类之间的关系，可以简化人们对系统的理解。\n类图是系统分析和设计阶段的重要产物，是系统编码和测试的重要模型。\n\n‍\n类图表示法类的表示方式在UML图中，类使用包含类名、属性和方法且待用分割线的矩形来表示。\n\n例：定义一个学生类\n‍\n\n\n","slug":"计算机专业课/设计模式","date":"2019-06-19T16:00:00.000Z","categories_index":"计算机专业课","tags_index":"编程四大件","author_index":"Hyc"},{"id":"3fe1ee3f3830128bf539e5f4ed9fbbe9","title":"Linux","content":"‍\n","slug":"运维/Linux","date":"2019-06-19T16:00:00.000Z","categories_index":"运维","tags_index":"运维,服务器,操作系统","author_index":"Hyc"},{"id":"cef80a544c72d58cb5c3cfe504a79cec","title":"JavaWeb基础","content":"‍\n","slug":"Java/JavaWeb/JavaWeb基础","date":"2019-06-19T16:00:00.000Z","categories_index":"Java","tags_index":"JavaWeb,Java基础","author_index":"Hyc"},{"id":"a00b2defe973fe8d6ab3038de496d7b1","title":"JDBC","content":"‍\n","slug":"Java/Java基础/JDBC","date":"2019-06-19T16:00:00.000Z","categories_index":"Java","tags_index":"Java基础","author_index":"Hyc"},{"id":"0b1381c4a63c09e41167c5168339035a","title":"JVM","content":"JVM概述什么是JVMJVM（Java Virtual Machine）Java虚拟机，就是Java程序的运行环境（Java二进制字节码的运行环境）。\n‍\n常见的JVM‍\n‍\n","slug":"Java/Java进阶/JVM","date":"2019-06-19T16:00:00.000Z","categories_index":"Java进阶","tags_index":"JVM","author_index":"Hyc"},{"id":"b4a715d3920019ff67db4366ba3b8790","title":"JQuery","content":"‍\n","slug":"前端/前端框架/JQuery","date":"2019-06-19T16:00:00.000Z","categories_index":"前端框架","tags_index":"前端框架","author_index":"Hyc"},{"id":"5f258f833478a2a0e21ce42d19305683","title":"Vue","content":"‍\n","slug":"前端/前端框架/Vue","date":"2019-06-19T16:00:00.000Z","categories_index":"前端框架","tags_index":"前端框架","author_index":"Hyc"},{"id":"bf5af07f5bcdc26d4909303b36fb356e","title":"MongoDB","content":"‍\n","slug":"数据库/非关系型数据库/MongoDB","date":"2019-06-19T16:00:00.000Z","categories_index":"数据库","tags_index":"数据库,NoSQL","author_index":"Hyc"},{"id":"a978a5e93d8e6628e9f4ee713be55be8","title":"Redis","content":"‍\n","slug":"数据库/非关系型数据库/Redis","date":"2019-06-19T16:00:00.000Z","categories_index":"数据库","tags_index":"数据库,NoSQL","author_index":"Hyc"},{"id":"e7c70105ffe2ca6c1f7ec0019b5a4c40","title":"JavaScript","content":"‍\n","slug":"前端/前端基础/JavaScript","date":"2019-05-05T16:00:00.000Z","categories_index":"前端基础","tags_index":"前端基础","author_index":"Hyc"},{"id":"3aecedd2cfed8e1ded8acda887b920ca","title":"HTML和CSS","content":"相关概念网站和网页网站是指在因特网上根据一定的规则，使用HTML等制作的用于展示特定内容相关的网页集合。\n网页是网站中的一页，通常是HTML格式的文件，通过浏览器来访问。\n网页时构成网站的基本元素，它通常由图片、链接、文字、声音，视频等元素组成。通常我们看到的网页都是以.htm或.html后缀结尾的文件，所以我们叫他们HTML文件。\n网页是由网页元素组成的，这些元素可以使用HTML标签描述出来，然后通过浏览器解析渲染给用户浏览。\nHTML简介HTML指的是超文本标记语言（Typer Text Markup Language），它是用来描述网页的一种语言。\nHTML不是一种编程语言，而是一种标记语言（markup language）。标记语言是一套标记标签。\n超文本的含义：\n\n可以加入图片、声音、动画，多媒体等内容，超越了文本限制\n可以从一个文件跳转到另一个文件，与世界各地主机的文件连接，超级链接文本\n\n常用的浏览器和内核浏览器是网页显示和运行的平台。常用的浏览器有IE，Edge，火狐（Firefox），谷歌（Chrome），Safari，Opera等。\n浏览器内核（渲染引擎），负责读取网页内容，整理讯息，计算网页的显示方式并显示页面。\n\n\n\n浏览器\n内核\n说明\n\n\n\nIE\nTrident\n国内的猎豹，360，百度浏览器都是使用该内核\n\n\nFirefox\nGecko\n火狐浏览器内核\n\n\nSafari\nWebkit\n苹果浏览器内核\n\n\nChrome&#x2F;Opera\nBlink\nBlink其实是Webkit的分支\n\n\nWeb标准Web标准是由W3C（万维网联盟）组织和其他标准化组织制定的一系列标准的集合。W3C是国际最著名的标准化组织。\n为什么需要Web标准？浏览器不同，他们显示页面或者排版就会有所不同。Web标准可以让页面在不同的浏览器中能够统一，不同开发人员写出的页面更加标准，同时还有以下优点：\n\n让Web的发展前景更广阔\n内容能被更广泛的设备访问\n更容易被搜索引擎搜索\n降低网站流量费用\n是网站更容易维护\n提高页面的渲染速度\n\nWeb标准主要包括结构（Structure），表现（Presentation）和行为（Behavior）三个方面。\n\n\n\n标准\n说明\n\n\n\n结构\n结构用于对网页元素进行整理和分类，现阶段主要是HTML\n\n\n表现\n表现用于设置网页的版式，颜色等外观样式，主要指CSS\n\n\n行为\n行为指网页模型的定义和交互，现阶段主要是JavaScript\n\n\n‍\nHTML标签HTML基础语法\nHTML标签是由尖括号包围的关键词，如：&lt;html&gt;​\nHTML标签通常都是成对出现的，如：&lt;html&gt;&lt;/html&gt;​，我们称之为双标签，第一个标签为开发标签，后面一个标签为结束标签\nHTML中也有部分标签是单个出现的，如：&lt;br /&gt;​，我们称之为单标签\n\n‍\n标签之间的关系标签之间存在并列和包含两种关系。\n\n例如：\n&lt;html>\n    &lt;head>\n    &lt;/head>\n    &lt;body>\n    &lt;/body>\n&lt;/html>\n\n&lt;head&gt;​标签和&lt;body&gt;​标签为并列关系。\n&lt;html&gt;​标签包含&lt;head&gt;​标签和&lt;body&gt;​标签。\n\n\n‍\nHTML基本结构标签每个网页都有一些基本的结构标签（骨架标签），页面的内容都是在这些基本标签内书写。\n&lt;!--文档类型声明，告诉浏览器使用哪个HTML版本来显示网页，当前代码告诉页面使用HTML5版本来显示网页。-->\n&lt;!DOCTYPE html>\n\n&lt;!--lang告诉当前浏览器文档的语言，虽然这里规定了语言，但是里面的语言并不受限制，主要是提示的左右，如浏览器翻译就是根据当前标签来识别-->\n&lt;html lang=\"en\">\n&lt;head>\n    &lt;!--规定浏览器使用什么字符编码-->\n    &lt;meta charset=\"UTF-8\">\n    &lt;!--移动端开发时再说-->\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    &lt;title>第一个HTML页面&lt;/title>\n&lt;/head>\n&lt;body>\n  \n&lt;/body>\n&lt;/html>\n\n以上就是由vscode生成的HTML基本结构。\n\n\n\n标签名\n含义\n说明\n\n\n\nhtml\nHTML标签\n页面中的最大标签，也叫做根标签\n\n\nhead\n文档头部\n在head中我们必须设置title标签\n\n\ntitle\n文档的标题\n让网页拥有一个属于自己的名字\n\n\nbody\n文档的主题\n元素包含文档的所有内容，基本都是放到body中\n\n\n\n\n\n\n\n\n\n\n\nHTML文件的后缀名必须是.html或.htm。\nHTML注释注释就是对代码进行解释说明，不参与代码的解释和执行。\n&lt;!--我是注释-->\n\n‍\n标题标签&lt;h1>标题1&lt;/h1>\n&lt;h2>标题2&lt;/h2>\n&lt;h3>标题3&lt;/h3>\n&lt;h4>标题4&lt;/h4>\n&lt;h5>标题5&lt;/h5>\n&lt;h6>标题6&lt;/h6>\n\n\n标题标签独占一行\n加了标题标签的文字会加粗，1~6字号逐渐减小\n\n‍\n","slug":"前端/前端基础/HTML和CSS","date":"2019-04-19T16:00:00.000Z","categories_index":"前端基础","tags_index":"前端基础","author_index":"Hyc"},{"id":"3316961ecf1671c6065b043220187c47","title":"Java基础","content":"Java概述‍\nJava环境搭建Windows‍\nLinux‍\nMac‍\n‍\nJava基础语法第一个Java程序‍\n注释注释就是对代码进行解释说明，不参与代码的执行，提高代码可读性。\nJava中主要有三种注释：单行注释，多行注释，文档注释（后面学习）。\n单行注释// 我是单行注释\n\n多行注释/*\n    注释1\n    注释2\n*/\n\n‍\n关键字关键字：就是被Java赋予了特定含义的英文单词。关键字的所有字母都是小写的。\n变量变量就是在程序执行过程中，其值可能会发生改变的量。\n\n变量的定义格式\n数据类型 变量名 = 数据值;\n\n数据类型整型‍\n浮点型‍\n字符型‍\n布尔型‍\n运算符算术运算符‍\n比较运算符‍\n逻辑运算符‍\n位运算符‍\n三元运算符‍\n流程控制分支语句if语句‍\nswitch语句‍\n循环语句for循环while循环‍\n数组数组：可以存放多个同一类型的数据。数组也是一种数据类型，式引用类型。\n数组的定义// 静态初始化，就是直接赋值\nString[] lans=&#123;\"java\",\"python\",\"C++\"&#125;;\n\n// 动态初始化\n数据类型[] 数组名 = new 数据类型[大小];\n// int a[] = new int[5];这样也可以\nint[] a = new int[5]; \n\n// 给数组元素第一个位置赋值\na[0] = 100;\n\n访问数组元素数组的下标从0开始\nString[] lans=&#123;\"java\",\"python\",\"C++\"&#125;;\n// 访问第一个数组元素\nSystem.out.println(lans[0])\n\n// 访问第二个数组元素\nSystem.out.println(lans[1])\n\n数组的遍历遍历就是查看数组的所有数据。\nString[] lans=&#123;\"java\",\"python\",\"C++\"&#125;;\n\n// 可以使用length获取数组长度\nfor (int i = 0; i &lt; langs.length; i++) &#123;\n      System.out.println(\"第\"+(i+1)+\"个元素为：\"+langs[i]);\n&#125;\n\n数组注意事项\n数组中的元素可以是任何数据类型，包括基本类型和引用类型。\n数组创建后如果没有赋值，有默认值，整型为0，浮点型为0.0，字符型为\\u0000，布尔类型为false，引用类型为null\n数组的下标是从0开始的，数组下标必须在数组长度-1范围内使用，否则会报下标越界异常\n数据属于引用数据类ing，数组型数据是对象\n数组长度一旦确定，就不能再改变\n\n数组常用操作数组拷贝int[] arr1 = &#123;10,20,30,40&#125;;\n\nint[] arr2 = new int[arr1.length];\n\nfor (int i = 0; i &lt; arr1.length; i++) &#123;\n    arr2[i] = arr1[i];\n&#125;\n\narr1[0] = 60;\nfor (int i = 0; i &lt; arr1.length; i++) &#123;\n    System.out.println(arr1[i]);\n&#125;\nSystem.out.println(\"-----------------------\");\nfor (int i = 0; i &lt; arr2.length; i++) &#123;\n    System.out.println(arr2[i]);\n&#125;\n\n数组反转\n方法一\n int[] arr = &#123; 10, 20, 30, 40, 50 &#125;;\n\nfor (int i = 0; i &lt; arr.length / 2; i++) &#123;\n    int temp = arr[arr.length - 1 - i];\n    arr[arr.length - 1 - i] = arr[i];\n    arr[i] = temp;\n&#125;\n\nfor (int i = 0; i &lt; arr.length; i++) &#123;\n    System.out.println(arr[i]);\n&#125;\n\n方法二\n int[] arr = &#123; 10, 20, 30, 40, 50 &#125;;\n\nint[] arr1= new int[arr.length];\n\nfor (int i = 0; i &lt; arr.length; i++) &#123;\n    arr1[arr.length-1-i] = arr[i];\n&#125;\narr = arr1;\n\nfor (int i = 0; i &lt; arr.length; i++) &#123;\n    System.out.println(arr[i]);\n&#125;\n\n数组扩容数组的长度一旦确定就不能再改变。\n/*\n    1. 定义初始数组\n    2. 定义一个新的数组，长度是原先数组长度+1\n    3. 遍历原先数组，依次将数据拷贝到新数组，并将新的值赋给新的空间\n    4. 将原先数组指向新数值\n*/\n\n多维数组（二维数组）其实就是每个数据元素都是一个数组，更高维的数组都同理。\nint[][] arr = &#123; &#123; 1, 2, 3 &#125;, &#123; 0, 0, 0 &#125;, &#123; 2, 3, 4 &#125; &#125;;\n\n// 遍历二维数组\nfor (int i = 0; i &lt; arr.length; i++) &#123;\n    for (int j = 0; j &lt; arr[i].length; j++) &#123;\n        System.out.print(arr[i][j] + \" \");\n    &#125;\n    System.out.println();\n&#125;\n\n‍\n面向对象类和对象‍\n","slug":"Java/Java基础/Java基础","date":"2018-10-19T16:00:00.000Z","categories_index":"Java","tags_index":"JavaWeb,Java基础","author_index":"Hyc"},{"id":"6f4f974e39a23a6637b9ccfa82544a76","title":"Maven","content":"‍\n","slug":"开发工具/Maven","date":"2018-10-09T16:00:00.000Z","categories_index":"开发工具","tags_index":"版本控制,开发工具","author_index":"Hyc"},{"id":"221a7ad001c03569112f684b2dfdc120","title":"Git","content":"Git概述Git简介Git是目前世界上最先进的分布式版本控制系统。\n\n\n\n\n\n\n\n\n\n版本控制：是一种在开发过程中用于管理我们对文件，目录等内容修改的历史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。\n‍\nGit环境搭建下载网站：Git - Downloading Package (git-scm.com)\nWindows\n打开控制台输入git​命令查看是否安装Git\n下载Windows版本的Git，一直next完成安装\n\nLinux\n打卡终端输入git​命令查看是否安装Git\n如果使用Debian或Ubuntu，使用sudo apt-get install git​来安装。如果是其他Linux系统，可以现在官网下载源码，然后依次输入：./config​，make​，sudo make install​这几个命令安装就好了\n\nMachomebrew方式\n打开终端安装homebrew，/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)​，安装成功后重启终端\n在终端输入brew install git​\n\nXcode方式\n直接从AppStore安装Xcode\n运行Xcode，选择Preferences在，弹出窗口重找到Doenloads，选择Command Line Tools点击Install下载即可\n\n配置用户名和邮箱因为Git是分布式版本控制系统，所以每个人都必须有自己的名字和Email地址。\ngit config --global user.name \"名字\"\n\ngit config --global user.email \"邮箱\"\n\nGit的常用操作初始化仓库git init\n\n打开控制台切换到指定目录，使用以上命令来初始化git仓库，git仓库可以是一个空目录，也可以是一个有文件的目录。\n执行以上代码以后，目录中会多出一个.git文件夹，如果你看不到，因为它默认是被隐藏的，需要打开显示隐藏的项目才能看到。这个目录就是来管理版本库的。\n将文件添加到仓库\n将指定文件添加到仓库\n\ngit add test.txt\n\ngit add text01.txt text02.txt\n\n\n将所有文件添加到仓库\n\ngit add .\n\n将文件提交到仓库git commit -m \"提交的说明\"\n\n‍\n远程仓库‍\n分支管理‍\n搭建Git服务器‍\n","slug":"开发工具/Git","date":"2018-10-09T16:00:00.000Z","categories_index":"开发工具","tags_index":"版本控制,开发工具","author_index":"Hyc"}]