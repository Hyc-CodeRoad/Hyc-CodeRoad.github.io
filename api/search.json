[{"id":"3aecedd2cfed8e1ded8acda887b920ca","title":"HTML和CSS","content":"\ntitle: HTML和CSS\ndate: 2019-03-28\ncategory: 前端基础\ntags:\n- 前端基础\n\n- HTML和CSS\n\n\n相关概念网站和网页网站是指在因特网上根据一定的规则，使用HTML等制作的用于展示特定内容相关的网页集合。\n网页是网站中的一页，通常是HTML格式的文件，通过浏览器来访问。\n网页时构成网站的基本元素，它通常由图片、链接、文字、声音，视频等元素组成。通常我们看到的网页都是以.htm或.html后缀结尾的文件，所以我们叫他们HTML文件。\n网页是由网页元素组成的，这些元素可以使用HTML标签描述出来，然后通过浏览器解析渲染给用户浏览。\nHTML简介HTML指的是超文本标记语言（Typer Text Markup Language），它是用来描述网页的一种语言。\nHTML不是一种编程语言，而是一种标记语言（markup language）。标记语言是一套标记标签。\n超文本的含义：\n\n可以加入图片、声音、动画，多媒体等内容，超越了文本限制\n可以从一个文件跳转到另一个文件，与世界各地主机的文件连接，超级链接文本\n\n常用的浏览器和内核浏览器是网页显示和运行的平台。常用的浏览器有IE，Edge，火狐（Firefox），谷歌（Chrome），Safari，Opera等。\n浏览器内核（渲染引擎），负责读取网页内容，整理讯息，计算网页的显示方式并显示页面。\n\n\n\n浏览器\n内核\n说明\n\n\n\nIE\nTrident\n国内的猎豹，360，百度浏览器都是使用该内核\n\n\nFirefox\nGecko\n火狐浏览器内核\n\n\nSafari\nWebkit\n苹果浏览器内核\n\n\nChrome&#x2F;Opera\nBlink\nBlink其实是Webkit的分支\n\n\nWeb标准Web标准是由W3C（万维网联盟）组织和其他标准化组织制定的一系列标准的集合。W3C是国际最著名的标准化组织。\n为什么需要Web标准？浏览器不同，他们显示页面或者排版就会有所不同。Web标准可以让页面在不同的浏览器中能够统一，不同开发人员写出的页面更加标准，同时还有以下优点：\n\n让Web的发展前景更广阔\n内容能被更广泛的设备访问\n更容易被搜索引擎搜索\n降低网站流量费用\n是网站更容易维护\n提高页面的渲染速度\n\nWeb标准主要包括结构（Structure），表现（Presentation）和行为（Behavior）三个方面。\n\n\n\n标准\n说明\n\n\n\n结构\n结构用于对网页元素进行整理和分类，现阶段主要是HTML\n\n\n表现\n表现用于设置网页的版式，颜色等外观样式，主要指CSS\n\n\n行为\n行为指网页模型的定义和交互，现阶段主要是JavaScript\n\n\n‍\nHTML标签HTML基础语法\nHTML标签是由尖括号包围的关键词，如：&lt;html&gt;​\nHTML标签通常都是成对出现的，如：&lt;html&gt;&lt;/html&gt;​，我们称之为双标签，第一个标签为开发标签，后面一个标签为结束标签\nHTML中也有部分标签是单个出现的，如：&lt;br /&gt;​，我们称之为单标签\n\n‍\n标签之间的关系标签之间存在并列和包含两种关系。\n\n例如：\n&lt;html>\n    &lt;head>\n    &lt;/head>\n    &lt;body>\n    &lt;/body>\n&lt;/html>\n\n​&lt;head&gt;​标签和&lt;body&gt;​标签为并列关系。\n​&lt;html&gt;​标签包含&lt;head&gt;​标签和&lt;body&gt;​标签。\n\n\n‍\nHTML基本结构标签每个网页都有一些基本的结构标签（骨架标签），页面的内容都是在这些基本标签内书写。\n&lt;!--文档类型声明，告诉浏览器使用哪个HTML版本来显示网页，当前代码告诉页面使用HTML5版本来显示网页。-->\n&lt;!DOCTYPE html>\n\n&lt;!--lang告诉当前浏览器文档的语言，虽然这里规定了语言，但是里面的语言并不受限制，主要是提示的左右，如浏览器翻译就是根据当前标签来识别-->\n&lt;html lang=\"en\">\n&lt;head>\n    &lt;!--规定浏览器使用什么字符编码-->\n    &lt;meta charset=\"UTF-8\">\n    &lt;!--移动端开发时再说-->\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    &lt;title>第一个HTML页面&lt;/title>\n&lt;/head>\n&lt;body>\n  \n&lt;/body>\n&lt;/html>\n\n以上就是由vscode生成的HTML基本结构。\n\n\n\n标签名\n含义\n说明\n\n\n\nhtml\nHTML标签\n页面中的最大标签，也叫做根标签\n\n\nhead\n文档头部\n在head中我们必须设置title标签\n\n\ntitle\n文档的标题\n让网页拥有一个属于自己的名字\n\n\nbody\n文档的主题\n元素包含文档的所有内容，基本都是放到body中\n\n\n\n\n\n\n\n\n\n\n\nHTML文件的后缀名必须是.html或.htm。\nHTML注释注释就是对代码进行解释说明，不参与代码的解释和执行。\n&lt;!--我是注释-->\n\n‍\n","slug":"前端/HTML和CSS","date":"2023-01-12T02:48:56.000Z","categories_index":"","tags_index":"","author_index":"Hyc"},{"id":"6f4f974e39a23a6637b9ccfa82544a76","title":"Maven","content":"‍\nMaven概述Maven简介Maven就是一个项目管理工具，将项目开发和管理过程抽象成一个项目对象模型（POM）。\n\n\n\n\n\n\n\n\n\nPOM（Project Object Model）：项目对象模型。\nMaven是由Java语言编写的。\nMaven的作用\n提供标准的，跨平台的自动化项目构建方式。\n方便快捷的管理项目依赖的资源（jar包），避免资源间的版本冲突问题。\n提供标准的，统一的项目结构。\n\nMaven安装配置下载安装官网：Maven – Welcome to Apache Maven\n\n下载对应操作系统的Maven\n下载文件为压缩文件，解压即可\n\n\n\n\n\n\n\n\n\n\n使用Maven必须先配置Java的开发环境。\n环境变量配置Windows\n打开环境变量\n新增环境变量MAVEN_HOME为Maven解压路径\n配置path，%MAVEN_HOME%\\bin​\n打开控制台输入mvn -v​，有版本信息输出即配置成功\n\nMaven相关配置配置文件地址：Maven解压路径\\conf\\settings.xml​\n本地仓库配置指定本地仓库的地址，防止占用c盘空间（c盘空间足够大的话也可以不用配置，使用默认即可）。\n默认本地仓库地址（使用mvn命令后才会出现该目录）：C:\\Users\\用户名\\.m2\\repository​\n&lt;localRepository>自定义仓库地址&lt;/localRepository>\n\n配置远程仓库原先的远程仓库服务器不在中国，因此下载速度很慢，将默认仓库连接的仓库地址改成国内的，提高下载速度。\n&lt;mirror>\n  &lt;!-- 此镜像的唯一标识 -->\n  &lt;id>alimaven&lt;/id>\n  &lt;!-- 对哪种仓库进行镜像，central即为中央仓库 -->\n  &lt;mirrorOf>central&lt;/mirrorOf>\n  &lt;!-- 镜像名称 -->\n  &lt;name>aliyun maven&lt;/name>\n  &lt;!-- 镜像URL -->\n  &lt;url>http://maven.aliyun.com/nexus/content/repositories/central/&lt;/url>\n&lt;/mirror>\n\nMaven基础概念仓库仓库用于存放资源即各种jar包。\n\n本地仓库：自己电脑上存储资源的仓库，需要从远程仓库获取。\n\n远程仓库\n\n私服：部门&#x2F;公司范围内存储资源的仓库。\n中央仓库：Maven团队维护，从存储所有资源的仓库。\n\n\n\n\n\n\n\n\n\n\n\n\n为什么需要私服？\n\n保存具有版权的资源，包含购买或者自主研发的jar（中央仓库的都是开源的jar）。\n一定范围内共享资源，仅对内部开放，下载速度更快。\n\n坐标中央仓库中存放了很多很多的资源，坐标的作用就是来定位不同的资源的位置。\n坐标主要组成：\n\ngroupId：定义当前Maven项目隶属组织名称（通常是域名反写，如：org.mybatis）\nartifactId：定义当前Maven项目名称\nversion：定义当前版本号\npackaging：定义该项目打包方式\n\n\n\n\n\n\n\n\n\n\n查询仓库网站（可以查询到各种依赖坐标，找到对应版本复制即可）：Maven Repository: Search&#x2F;Browse&#x2F;Explore (mvnrepository.com)\n第一个Maven项目Maven工程目录结构\nmaven-project（项目名）\n\nsrc\n\nmain\n\nJava\nresources\n\n\ntest\n\njava\nresources\n\n\n\n\npom.xml（不要自己写，找一个即可）\n\n\n\n\n手工创建（了解）\n按照Maven工程目录创建一个文件工程文件即可\n\nMaven命令构建项目（需要在pom.xml文件所在目录下）\n\n\n\n命令\n说明\n\n\n\nmvn compile\n编译\n\n\nmvn clean\n清理\n\n\nmvn test\n测试\n\n\nmvn package\n打包\n\n\nmvn install\n安装到本地仓库\n\n\n\n\n插件创建工程（了解）\n创建工程命令\nmvn archetype:generate\n    -DgroupId=xxx\n    -DgrtifactId=xxx\n    -DarchetypeArtifactId=xxx\n    -DinteractiveMode=false\n创建Java工程\nmvn archetype:generate\n    -DgroupId=com.test\n    -DgrtifactId=demo01\n    -DarchetypeArtifactId=maven-archetype-quickstart\n    -Dversion=0.0.1-snapshot\n    -DinteractiveMode=false\n创建web工程\nmvn archetype:generate\n    -DgroupId=com.test\n    -DgrtifactId=demo01\n    -DarchetypeArtifactId=maven-archetype-webapp\n    -Dversion=0.0.1-snapshot\n    -DinteractiveMode=false\n\nIDEA生成（2022.3版本）IDEA配置Maven\nFile（文件）-&gt;Setting（设置）\n搜索Maven\n修改Maven home directory路径为自己解压的Maven路径\n修改User settings file为Maven的conf目录中的配置文件，后面的Override（覆盖）勾选。点击ok即可。\n\n创建Maven项目\n点击创建新项目，打开新建项目弹窗\n\n点击Maven Archetype\n\n修改里面的信息创建即可\n\nArchetype：中选择需要创建的项目模板\n\nmaven-archetype-quickstart：Java项目\nmaven-archetype-webapp：JavaWeb项目\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n其实底层就是上面的插件创建工程命令，只是IDEA提供了可视化操作界面。\ntomact插件以及web工程启动\npom.xml中新增tomact插件\n&lt;!--构建-->\n&lt;build>\n    &lt;!--配置插件-->\n    &lt;plugins>\n        &lt;!--具体插件配置-->\n        &lt;plugin>\n            &lt;!-- https://mvnrepository.com/artifact/org.apache.tomcat/tomcat-catalina -->\n            &lt;dependency>\n                &lt;groupId>org.apache.tomcat.maven&lt;/groupId>\n                &lt;artifactId>tomcat7-maven-plugin&lt;/artifactId>\n                &lt;version>2.1&lt;/version>\n                &lt;!--配置-->\n                &lt;configuration>\n                    &lt;!--端口号-->\n                    &lt;port>&lt;/port>\n                    &lt;!--访问路径-->\n                    &lt;path>&lt;/path>\n                &lt;/configuration>    \n            &lt;/dependency>\n        &lt;/plugin>\n    &lt;/plugins>\n&lt;/build>\n\n下载依赖后刷新，IDEA的Maven中就会多出一个tomact的插件，双击其中的run命令就可以运行了\n\n\n依赖管理依赖就是当前项目运行所需的jar包，一个项目可以设置多个依赖。\n依赖配置&lt;!--设置当前项目需要的所有jar-->\n&lt;dependencies>\n    &lt;!--设置具体依赖-->\n    &lt;dependency>\n        &lt;!--依赖所属群组id-->\n        &lt;groupId>&lt;/groupId>\n        &lt;!--依赖所属项目id-->\n        &lt;artifaotId>&lt;/artifaotId>\n        &lt;!--依赖版本号-->\n        &lt;version>&lt;/version>\n    &lt;/dependency>\n&lt;/dependencies>\n\n依赖传递依赖具有传递性：\n\n直接依赖：在当前项目中通过依赖配置建立的依赖关系。\n间接依赖：被引用的资源如果依赖其他资源，当前项目简介依赖其他资源。\n\n依赖传递中的冲突问题：\n\n路径优先：当依赖中出现相同资源时，层级越深，优先级越低，层级越浅，优先级越高。\n声明优先：当资源在相同层级被依赖时，配置顺序越靠前的覆盖配置顺序靠后的。\n当同级配hi了相同资源的不同版本，后配置覆盖先配置的\n\n排除依赖&lt;!--设置具体依赖-->\n&lt;dependency>\n    &lt;!--依赖所属群组id-->\n    &lt;groupId>&lt;/groupId>\n    &lt;!--依赖所属项目id-->\n    &lt;artifaotId>&lt;/artifaotId>\n    &lt;!--依赖版本号-->\n    &lt;version>&lt;/version>\n    &lt;!--要排除的依赖-->\n    &lt;exclusions>\n        &lt;exclusion>\n            &lt;!--依赖所属群组id-->\n            &lt;groupId>&lt;/groupId>\n            &lt;!--依赖所属项目id-->\n            &lt;artifaotId>&lt;/artifaotId>\n        &lt;/exclusion>\n    &lt;/exclusions>\n&lt;/dependency>\n\n依赖的范围依赖的jar默认情况下可以在任何地方使用，可以通过scope标签来设定其作用范围：\n\n主程序范围有效（main文件夹范围内）\n测试程序范围有效（test文件夹范围内）\n是否参与打包（package指令范围内）\n\n\n\n\n值\n说明\n\n\n\ncompile（默认）\n可以在任何地方使用\n\n\ntest\n测试文件夹范围内\n\n\nprovided\n主代码和测试代码范围内\n\n\nruntime\n打包范围内\n\n\n生命周期插件构建生命周期Maven的生命周期描述的是一次构建过程经历了多少个事件：\n\nclean：清理工作\ndefault：核心工作，比如编译，测试，打包，部署等\nsite：产生报告，发布站点等\n\n‍\n插件插件与生命周期内的阶段绑定，在执行到对应生命周期时执行对应的插件功能。\n默认maven在各个生命周期上绑定有预设的功能，通过插件可以自定义其他功能。\n‍\n","slug":"Java/JavaWeb/Maven","date":"2021-05-05T16:00:00.000Z","categories_index":"JavaWeb","tags_index":"项目管理","author_index":"Hyc"}]