[{"id":"838ae74e3a76757d637de803a615bfd9","title":"MySQL","content":"数据库概述‍\n‍\nMySQL环境搭建Windows‍\nMac‍\nLinux‍\nDocker‍\nSQL概述SQL（Structured Query Language），结构化查询语言。\n‍\nSQL分类\nDDL（Data Definition Language）：数据定义语言，这些语句定义了不同的数据库，表，视图，索引等数据库对象，还可以用来创建，删除，修改数据库和数据表的结构。\n主要关键字：CREATE​ ，DROP​ ，ALTER​ 等\n\nDML（Data Manipulation Language）：数据操作语言，用于添加，删除更新和查询数据库记录，并检查数据完整性。\n主要关键字：INSERT​，DELETE​，UPDATE​，SELECT​等\n\nDCL（Data Control Language）：数据控制语言，用于定义数据库，表，字段，用户的访问权限和安全级别\n主要关键字：GRANT​，REVOKE​，COMMIT​，ROLLBACK​，SAVEPOINT​等\n\n\n\n\n\n\n\n\n\n\n\n因为查询语句使用的非常频繁，所以常常被分为一类DQL（数据查询语言）。\n还有将事务相关的COMMIT​，ROLLBACK​取出来，称为TCL（事务控制语言）\n‍\nSQL的规则和规范\n\n\n\n\n\n\n\n\n规则是必须遵守的，规范不一定遵守。\n基本规则\nSQL可以写在一行或多行，常常使用缩进和换行提高代码可读性。\n每条语句以分号结束。\n所有的符号都是英文符号。\n\n‍\nDDL（操作数据库，表，字段等操作）操作数据库，表，字段等操作\nDDL-数据库操作查询\n查询当前所有数据库\nSHOW DATABASES;\n\n查询当前使用的数据库\nSELECT DATABASE();\n\n创建\n创建数据库\nCREATE DATABASE [IF NOT EXISTS] 数据库名 [DEFAULT CHARSET 字符集][COLLATE 排序规则];\n\n\n\n\n\n\n\n\n\n\n创建数据库时如果已经存在同名数据库会报错，可以使用IF NOT EXITS​ 来判断数据库是否存在，不存在创建。\n删除\n删除数据库\nDROP DATABASE [IF EXISTS] 数据库名;\n\n使用\n使用数据库\nuse 数据库;\n\n\n\n\n\n\n\n\n\n\n数据库需要使用以后，才能操作该数据库的内容。可以使用以上查看当前数据库命令，查询当前使用的数据库名称。\n‍\nDDL-表操作查询\n查询当前数据库所有表\nSHOW TABLES;\n\n查询表结构\nDESC 表名;\n\n查询指定表建表语句\nSHOW CREATE TABLE 表名;\n\n创建\n创建表\nCREATE TABLE 表名(\n    字段1 类型 [COMMENT 字段注释],\n    字段2 类型 [COMMENT 字段注释],\n    字段3 类型 [COMMENT 字段注释]\n    ...\n)[COMMENT 表注释];\n\n\n\n\n\n\n\n\n\n\n最后一个字段没有逗号。\n修改表结构\n添加字段\nALTER TABLE 表名 ADD 字段名 类型[COMMENT 注释][约束];\n\n修改字段数据类型\nALTER TABLE 表名 MODIFY 字段名 新数据类型;\n\n修改字段名和字段类型\nALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型[COMMENR 注释][约束];\n\n删除字段\nALTER TABLE 表名 DROP 字段名;\n\n修改表名\nALTER TABLE 表名 RENAME TO 新表名;\n\n删除表\n删除表\nDROP TABLE [IF EXISTS] 表名;\n\n删除指定表，并重新创建该表\nTRUNCATE TABLE 表名;\n\n数据类型数值类型\n\n\n类型\n大小\n描述\n\n\n\nTINYINT\n1 byte\n小整数型\n\n\nSMALLINT\n2 bytes\n大整数型\n\n\nMEDIUMINT\n3 bytes\n大整数型\n\n\nINT或INTEGER\n4 bytes\n大整数型\n\n\nBIGINR\n8 bytes\n极大整数型\n\n\nFLOAT\n4 bytes\n单精度浮点数\n\n\nDOUBLE\n8 bytes\n双精度浮点数\n\n\nDECIMAL\n\n小数值（精确定点数）\n\n\n\n\n\n\n\n\n\n\n\n在创建表时可以使用unsigned​ 来定义无符号。\n字符串类型\n\n\n类型\n描述\n\n\n\nCHAR\n定长字符串\n\n\nVARCHAR\n变长字符串\n\n\nTINYBLOB\n不超过255个字符的二进制数据\n\n\nTINYTEXT\n短文本字符串\n\n\nBLOB\n二进制形式的长文本数据\n\n\nTEXT\n长文本数据\n\n\nMEDIUMBLOB\n二进制形式的中等长文本数据\n\n\nMEDIUMTEXT\n中等长度文本数据\n\n\nLONGBLOB\n二进制形式的极大文本数据\n\n\nLONGTEXT\n极大文本数据\n\n\n‍\n日期类型\n\n\n类型\n格式\n描述\n\n\n\nDATE\nYYYY-MM-DD\n日期值\n\n\nTIME\nHH:MM:SS\n时间值\n\n\nYEAR\nYYYY\n年份值\n\n\nDATATIME\nYYYY-MM-DD HH:MM:SS\n混合日期和时间值\n\n\nTIMESTAMP\nYYYY-MM-DD HH:MM:SS\n混合日期和时间值，时间戳\n\n\n‍\nDML（增删改操作）DML，Date Manipulation Language（数据操作语言），用来对数据库中表的数据记录增删改操作。\n添加数据（INSERT）\n给指定字段添加数据\nINSERT INTO 表名(字段1,字段2,...) VALUES(值1,值2,...);\n\n给全部字段添加数据\nINSERT INTO 表名 VALUES(值1,值2,...);\n\n批量添加数据\n-- 指定字段\nINSERT INTO 表名(字段1,字段2,...) VALUES(值1,值2,...),(值1,值2,...),...;\n\n-- 全部字段\nINSERT INTO 表名 VALUES(值1,值2,...),(值1,值2,...),...;\n\n\n\n\n\n\n\n\n\n\n\n插入数据时，指定字段顺序需要与值的顺序是一一对应的。\n字符串和日期类型数据应该包含在引号中。\n插入数据的大小应该在字段的规定范围内。\n\n修改数据（UPDATE）\n修改数据\nUPDATE 表名 SET 字段名1=值1,字段名2=值2,...[WHERE 条件];\n\n\n\n\n\n\n\n\n\n\n没有条件的话会修改整张表数据，有条件则修改符合条件的数据。\n删除数据（DELETE）\n删除数据\n\nDELETE FROM 表名 [WHERE 条件];\n\n\n\n\n\n\n\n\n\n\n\n没有条件的话会删除整张表数据，有条件则删除符合条件的数据。\n没有删除某个字段值的语法，使用UPDATE语句，设置为null即可。\n\n‍\nDQL（查询操作）DQL，Data Query Language（数据查询语言），用来查询数据库中的表记录。\n语法SELECT 字段列表\nFROM 表名\nWHERE 条件列表\nGROUP BY 分组字段列表\nHAVING 分组后条件列表\nORDER BY 排序字段列表\nLIMIT 分页参数\n\n基础查询\n查询所有字段\nSELECT * FROM 表名;\n\n查询指定字段\nSELECT 字段1[as 别名1],字段2[as 别名2],... FROM 表名;\n\n\n\n\n\n\n\n\n\n\nas 别名​ 可以设置字段别名，增强可读性，在MySQL中as可以省略，为了代码可读性不建议省略。\n\n去重查询\nSELECT DISTINCT 字段列表 FROM 表名;\n\n条件查询\n条件查询\nSELECT 字段列表 FROM 表名 WHERE 条件列表;\n\n运算符比较运算符\n\n\n符号\n功能\n\n\n\n&gt;\n大于\n\n\n&gt;&#x3D;\n大于等于\n\n\n&lt;\n小于\n\n\n&lt;&#x3D;\n小于大亨与\n\n\n&#x3D;\n等于\n\n\n&lt;&gt;或!&#x3D;\n不等于\n\n\nIN(…)\n在IN之后列表中的值\n\n\nLIKE 占位符\n模糊匹配（_匹配单个字符，%匹配任意个字符）\n\n\nIS NULL\n是NULL\n\n\nANY\n子查询返回列表中，有任意一个满足条件即可\n\n\nSOME\n与ANY等同，使用SOME的地方也都可以使用ANY\n\n\nALL\n子查询返回列表的所有值都要满足\n\n\n逻辑运算符\n\n\n符号\n功能\n\n\n\nAND或&amp;&amp;\n并且\n\n\nOR或||\n或者\n\n\nNOT或!\n非\n\n\n聚合函数聚合函数是将一列数据作为一个整体，进行纵向计算。\n常见聚合函数\n\n\n函数\n说明\n\n\n\ncount\n统计数量\n\n\nmax\n最大值\n\n\nmin\n最小值\n\n\navg\n平均值\n\n\nsum\n求和\n\n\n语法SELECT 聚合函数(字段列表) FROM 表名;\n\n\n\n\n\n\n\n\n\n\n所有的null值不参与所有聚合函数的运算。\n分组查询SELECT 字段列表 FROM 表名 [WHERE 条件] GROUP BY 分组字段名 [HAVING 分组后过滤条件]\n\n\n\n\n\n\n\n\n\n\nwhere和having的区别：\n\n执行时机不同：where是在分组前进行过滤，不满足where条件，不参与分组。having在分组后进行过滤。\n判断条件不同：where不能对聚合函数进行判断，而having可以。\n\n分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义。\n排序查询SELECT 字段列表 FROM 表名 [WHERE 条件] ORDER BY 字段1 排序方式1,字段2 排序方式2;\n\n\n\n\n\n\n\n\n\n\n\n排序方式只有两种：ASC（升序，默认，可以省略），DESC（降序）。\nMySQL支持多字段排序，当第一个字段相同时，根据第二个字段排序。\n\n分页查询SELECT 字段列表 FROM 表名 [WHERE 条件] LIMIT 起始索引,查询记录数;\n\n\n\n\n\n\n\n\n\n\n\n起始索引从0开始，起始索引&#x3D;（查询页码-1）* 每页显示记录数。\n分页查询是数据库的方言，不同的数据库有不同的实现，MySQL中是LIMIT。\n如果查询的是第一页数据，起始索引可以省略。\n\n执行顺序\nFROM：首先执行FROM，决定查询的表\nWHERE：通过WHERE过滤查询的数据\nGROUP BY和HAVING：分组过滤\nSELECT：需要查询的字段\nORDER BY：排序字段列表\nLIMIT：分页\n\n‍\nDCL（操作数据库用户，访问权限）DCL，Data Control Language（数据控制语言），用来管理数据库用户，控制数据库访问权限。\n用户管理查询\n查询用户\n需要先use​ 数据库\nSELECT * FROM user;\n\n创建\n创建用户\nCREATE USER '用户名'@'主机名' IDENRIFIED BY '密码';\n\n修改用户密码\n修改用户密码\nALTER USER '用户名'@'主机名' IDENRIFIED WITH mysql_native_password BY '新密码';\n\n删除\n删除用户\nDROP USER '用户名'@'主机名';\n\n权限控制MySQL中定义了很多权限，但是常用的就一下几种：\n\nALL，ALL PRIVILEGES：所有权限\nSELECT：查询数据\nINSERT：插入数据\nUPDATE：修改数据\nDELETE：删除数据\nALTER：修改表\nDROP：删除数据库&#x2F;表&#x2F;视图\nCREATE：创建数据库&#x2F;表\n\n查询权限\n查询权限\nSHOW GRANTS FOR '用户名'@'主机名';\n\n授予权限\n授予权限\n-- 指定数据库，指定表名\nGRANT 权限列表 ON 数据库名:表名 FROM '用户名'@'主机名';\n\n-- 指定所有数据库\nGRANT 权限列表 ON *:* FROM '用户名'@'主机名';\n\n\n\n\n\n\n\n\n\n\n\n多个权限之间使用逗号隔开。\n授权时，数据库名和表名可以使用*进行通配，代表所有。\n\n撤销权限\n撤销权限\nREVOKE 权限列表 ON 数据库名:表名 FROM '用户名'@'主机名';\n\n‍\n函数函数是指一段可以直接被另一段程序调用的程序或代码。\n字符串函数\n常用的字符串函数\n\n\n\n\n函数\n说明\n\n\n\nCONCAT(s1,s2,…)\n拼接字符串\n\n\nLOW(str)\n将字符串全部转成小写\n\n\nUPPER(str)\n将字符串全部转成大写\n\n\nLPAD(str,n,pad)\n左填充，用字符串pad对str左边进行填充，达到n个字符串长度\n\n\nRPAD(str,n,pad)\n右填充，用字符串pad对str右边进行填充，达到n个字符串长度\n\n\nTRIM(str)\n去掉字符串头部和尾部的空格\n\n\nSUBSTRING(str,start,len)\n返回从字符串str从start位置起的第len个长度的字符串\n\n\n数值函数\n常见的数值函数\n\n\n\n\n函数\n说明\n\n\n\nCEIL(x)\n向上取整\n\n\nFLOOR(x)\n向下取整\n\n\nMOD(x,y)\n返回x&#x2F;y的模\n\n\nRAND()\n返回0~1的随机数\n\n\nROUND(x,y)\n求参数x的四舍五入的值，保留y位小数\n\n\n日期函数\n常见日期函数\n\n\n\n\n函数\n说明\n\n\n\nCURDATE()\n返回当前日期\n\n\nCURTIME()\n返回当前时间\n\n\nNOW()\n返回当前日期和时间\n\n\nYEAR(date)\n获取指定date的年\n\n\nMONTH(date)\n获取指定date的月份\n\n\nDAY(date)\n获取指定date的日期\n\n\nDATE_ADD(date,INTERVAL expr type)\n返回一个日期&#x2F;时间值加上一个时间间隔expr后的时间值\n\n\nDATEDIFF(date1,date2)\n返回date1和date2之间的天数\n\n\n流程函数\n\n\n函数\n说明\n\n\n\nIF(value,t,f)\n如果value为true，则返回t，否则返回f\n\n\nIFNULL(value1,value2)\n如果value1不为空，返回value1，否咋返回value2\n\n\nCASE WHEN [val1] THEN [res]…ELSE [default] END\n如果val1为true，返回res1，否则返回default默认值\n\n\nCASE [expr] WHEN [val1] THEN [res1]…ELSE [default] END\n如果expr的值等于val1，返回res1，否则返回default默认值\n\n\n‍\n约束概述约束就是作用于表中字段上的规则，用于限制存储在表中的数据。为了保证数据库中数据的正确，有效性和完整性。\n‍\n分类\n非空约束（NOT NULL）：限制该字段的数据不能为null。\n唯一约束（UNIQUE）：保证该字段的所有数据都是唯一，不重复的。\n主键约束（PRIMARY KEY）：主键是一行数据的唯一标识，要求非空且唯一。\n默认约束：保存数据时，如果未指定该字段的值，则采用默认值。\n检查约束（8.0.16版本之后，CHECK）：保证字段值满足某一个条件。\n外键约束（FOREIGN KEY）：用来让两张表的数据之间建立连接，保证数据的一直性和完整性。\n\n\n\n\n\n\n\n\n\n\n约束是作用于表中字段上的，可以在创建表&#x2F;修改表的时候添加约束。\n‍\n约束演示设置表：\n\nid：主键，并自动增长（primary key，auto_increment）\nname：不为空，并且唯一（not null，unique）\nage：大于0，并且小于等于120（check）\nstatus：如果没有指定该值，默认为1（default）\ngender：无\n\ncreate table user(\n    id int primary key auto_increment comment 'ID',\n    name varchar(10) not null unique comment '姓名',\n    age int check(age>0 &amp;&amp; age&lt;=120) comment '年龄',\n    status char(1) default '1' comment '状态',\n    gender char(1) comment '性别'\n)comment '用户表';\n\n‍\n外键约束外键用来让两张表的数据之间建立连接，从而保证数据的一致性和完整性。\n添加外键\n创建时添加\ncreate table 表名(\n    字段名 数据类型,\n    ...\n    [CONSTRAINT][外键名称] FOREIGN KEY(外键字段名) REFERENCES 主表(主表列名)\n);\n\n修改时添加\nALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY(外键字段名) REFERENCES 主表(主表列明);\n\n删除外键ALTER TABLE 表名 DROP FOREIGN KEY 外键名称;\n\n外键的删除&#x2F;更新行为\nNO ACTION：当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有外键约束，如果有则不允许删除&#x2F;更新（与RESTRICT一致）。\nRESTRICT：当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有外键约束，如果有则不允许删除&#x2F;更新（与NO ACTION一致）。\nCASCADE：当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有外键约束，如果有，则也删除&#x2F;更新外键在子表中的数据。\nSET NULL：当在父表中删除&#x2F;更新对应记录时，首先检查该记录是否有外键约束，如果有，则设置子表中该外键值为null（需要要求外键允许为null）。\nSET DEFAULT：父表有变更时，子表将外键列设置成一个默认值（Innodb不支持）。\n\nALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY(外键字段名) REFERENCES 主表(主表列明) ON UPDATE 行为 ON DELETE 行为;\n\n多表查询多表关系\n一对多（多对一）\n例如：部门和员工的关系，一个部门对应多个员工，一个员工对应一个部门。\n在多的一方建立外键，指向一的一方。\n\n多对多\n例如：学生与课程，一个学生可以选多门课程，一门课程可以有很多学生。\n建立中间表，中间表至少包含两个外键，分别关联两方主键。\n\n一对一\n例如：用户和用户详情\n一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升效率。\n在任意一方加入外键，关联另一方的主键，并且设置外键为唯一的（UNIQUE）\n\n\n多表查询概述多表查询即多张表中查询数据。\n笛卡尔积现象select * from user,country;\n\n以上语句会发生笛卡尔积现象。笛卡尔积是指在数学中，两个集合的所有组合情况。多表查询时需要消除无效的笛卡尔积。\n消除笛卡尔积添加where条件一个表的主键id等于另一个表的外键id即可。\n多表查询分类\n连接查询\n\n内连接：相当于查询A，B交集部分数据\n\n外连接：\n\n左外连接：查询左表所有数据，以及两张表交集部分数据\n右外连接：查询右表所有数据，以及两张表交集部分数据\n\n\n自连接：当前表与自身连接查询，自连接必须使用表别名\n\n\n\n子查询\n\n\n内连接内连接查询A，B交集部分的数据。\n\n隐式内连接\nSELECT 字段列表 FROM 表1,表2 WHERE 条件;\n\n显示内连接\nSELECT 字段列表 FROM 表1 [INNER] JOIN 表2 ON 连接条件;\n\n\n\n\n\n\n\n\n\n\n如果为表起了别名，就只能使用别名，不能再使用表名了。\n外连接\n左外连接：包含左表所有数据，包含表1和表2交集部分数据\nSELECT 字段列表 FROM 表1 LEFT JOIN 表2 ON 连接条件;\n\n右外连接：包含左表所有数据，包含表1和表2交集部分数据\nSELECT 字段列表 FROM 表1 RIGHT JOIN 表2 ON 连接条件;\n\n自连接\n自连接：自己连接自己\nSELECT 字段列表 FROM 表1 别名1 JOIN 表1 别名2 ON 条件;\n\n\n\n\n\n\n\n\n\n\n自连接查询，可以是内连接查询，也可以是外连接查询。\n联合查询union，union all对于union查询，就是把多次查询结果合并起来，形成一个新的查询结果集。\nSELECT 字段列表 FROM 表1 UNION[ALL] SELECT 字段列表 表2;\n\n\n\n\n\n\n\n\n\n\n如果有all可以不会去重查询，没有all会去重查询。\n对于联合查询的多张表的列数必须保持一致，字段类型也需要保持一致。\n子查询SQL语句中嵌套SELECT语句，称为嵌套查询，又称子查询。\nSELECT * FROM 表1 WHERE column1 = (SELECT column1 FROM 表2);\n\n\n\n\n\n\n\n\n\n\n子查询外部的语句可以是INSERT&#x2F;UPDATE&#x2F;DELETE&#x2F;SELECT的任何一个。\n子查询分类\n根据结果分\n\n标量子查询（子查询结果为单个值）\n列子查询（子查询结果为一列）\n行子查询（子查询结果为一行）\n表子查询（子查询结果为多行多列）\n\n\n根据子查询位置，分为：WHERE之后，FROM之后，SELECT之后。\n\n\n标量子查询查询结果为单个值。常用操作符：&#x3D;，&lt;&gt;，&gt;，&gt;&#x3D;，&lt;，&lt;&#x3D;。\n\n案例1：查询销售部的所有员工信息\n\n查询销售部的部门id\n根据销售部的部门id查询员工\n\nselect * from emp where dept_id = (select id from dept where name = '销售部');\n\n案例2：查询在张三之后入职的人员信息\n\n查询张三的入职日期\n根据张三的入职日期查询之后的员工\n\nselect * from emp where entrydate > (select entrydate from emp where name = '张三');\n\n‍\n列子查询子查询返回的结果是一列可以是多行。\n常用操作符：IN，NOT IN，ANY，SOME，ALL\n\n案例1：查询销售部和市场部的所有员工信息\n\n查询销售部和市场部的部门id\n根据部门id查询员工信息\n\nselect * from emp where dept_id in (select id form dept where name='市场部' or name = '销售部';)\n\n‍\n事务事务简介事务是一组操作的集合，它是一个不可分割的工作单位，事务会把所有操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。\n例如：银行转账，两个人转账时，一个人的扣款和另一个人的收款必须同时成功，要么同时失败，才能保证数据的正确性。\n事务操作\n查看&#x2F;设置事务提交方式\n-- 查看事务提交方式\nSELECT @@autocommit;\n\n-- 设置事务提交方式，0为手动提交，1为自动提交\nSET @@autocommit = 0;\n\n提交事务\nCOMMIT;\n\n回滚事务\nROLLBACK;\n\n开启事务\n使用这个命令就不需要去修改事务提交方式了\nSTART TRANSACTION 或者BEGIN;\n\n事务四大特性\n原子性\n事务是不可分割的最小操作单元，要么全部成功，要么全部失败。\n\n一致性\n事务完成时，必须使所有的数据都保持一致状态。\n\n隔离性\n数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行。\n\n持久性\n事务一旦提交或回滚，他对数据库中的数据的改变就是永久的。\n\n\n并发事务问题\n脏读\n一个事务读到另外一个事务还没有提交的数据。\n\n不可重复读\n一个事务先后读取同一条记录，但两次读取的数据不同，称之为不可重复读。\n\n幻读\n一个事务按照查询条件查询数据时，没有对应数据行，但是在插入数据时，又发现这行数据已经存在，好像出现了幻影。\n\n\n事务隔离级别‍\n存储引擎MySQL体系结构​​\n\n连接层：\n最上层是一些客户端和链接服务，主要完成一些类似于连接处理，授权认证，及相关方案。服务器也会为安全接入的每个客户端验证它所具有的操作权限。\n\n服务层：\n第二层架构主要完成大多数的核心服务功能，如SQL接口，并完成缓存的查询，SQL的分析和优化，部分内置函数的执行。所有跨存储引擎的功能也在这一层实现，如过程，函数等。\n\n引擎层：\n存储引擎真正的负责了MySQL中数据的存储和提取，服务器通过API和存储引擎进行通信。不同的存储引擎具有不同的功能，这样我们可以根据自己的需求，来选取合适的存储引擎。\n\n存储层\n主要将数据存储在文件系统之上，并完成与存储引擎的交互。\n\n\n存储引擎简介存储引擎就是存储数据，建立索引，更新&#x2F;查询数据等技术的实现方式。存储引擎是基于表的，而不是基于库的，所以存储引擎也可以被称为表类型。\n\n\n\n\n\n\n\n\n\n存储引擎是MySQL中特有的。不同的引擎有不同的引用场景，没有好坏之分。在合适的引用场景选择合适的存储引擎即可。\n\n在创建表时，指定存储引擎\nMySQL5.5之后，默认为InnoDB\nCREATE TABLE 表名(\n    字段1 类型1,\n    字段2 类型2,\n    ...\n)ENGINE=INNODB;\n\n查看当前数据库支持的存储引擎\nSHOW engines;\n\n存储引擎特点InnoDBInnoDB是一种兼顾高可靠性和高性能的通用存储引擎，在MySQL5.5之后，InnoDB是MYSQL的默认存储引擎。\n\nDML（增删改）操作遵循ACID模型，支持事务。\n\n行级锁，提高并发访问性能。\n\n支持外键FOREIGN KEY约束，保证数据的完整性和正确性。\n\nxxx.ibd（xxx为表名），InnoDB引擎的每一张表都会对应这样一个表空间文件，存储该表的表结构（frm，sdi），数据和索引。（参数：innodb_file_per_table，控制是否每一个表对应一个ibd）。\n\n逻辑存储结构：表空间（TableSpace），段（Segment），区（Extent），页（Page），行（Row）。\n\n\nMyISAMMyISAM是MySQL早期的默认存储引擎。\n\n不支持事务，不支持外键。\n支持表锁，不支持行锁。\n访问速度快。\nxxx.sdi存储表结构信息，xxx.MYD存储数据，xxx.MYI存储索引。\n\nMemoryMemory引擎的表数据是存储在内存中的，由于受到硬件问题，或断电问题的影响，只能将这些表作为临时表或缓存使用。\n\n数据存放在内存中，速度快。\n支持hash索引。\nxxx.sdi存储表结构信息，数据都存储在内存中，所以没有其他文件。\n\n存储引擎选择在选择存储引擎时，应该根据应用的场景选择合适的存储引擎。对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合。\n\nInnoDB：\n是MySQL的默认存储引擎，支持事务，外键。如果对事务完整性有比较高要求，在并发条件下要求数据的一致性，数据操作除了插入和查之外，还包括很多更新，删除操作，那么InnoDB比较合适。\n\nMyISAM：\n如果应用以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务完整性，并发性要求不是很高，那么选择这个存储引擎是非常合适的。\n\nMEMORY：\n将所有数据保存在内存中，访问速度快，通常用于临时表以及缓存。MEMORY的缺陷就是对表的大小有限制，太大的表无法存储在内存中，而且无法保障数据的安全性。\n\n\n索引‍\nSQL优化‍\n视图‍\n存储过程‍\n触发器‍\n锁全局锁表级锁行级锁InnoDB引擎逻辑存储结构架构事务原理MVCC‍\n运维日志‍\n主从复制‍\n分库分表‍\n读写分离‍\n","slug":"MySQL","date":"2022-11-14T13:35:53.941Z","categories_index":"数据库","tags_index":"数据库,关系型数据库","author_index":"Hyc"},{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new \"My New Post\"\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2022-10-01T04:19:01.104Z","categories_index":"","tags_index":"","author_index":"Hyc"}]