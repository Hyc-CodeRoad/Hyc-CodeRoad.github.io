{"title":"数据结构和算法","uid":"eb194f41cb36b6fda6721d8affe1bb49","slug":"计算机专业课/数据结构和算法","date":"2019-06-19T16:00:00.000Z","updated":"2023-02-04T10:30:56.905Z","comments":true,"path":"api/articles/计算机专业课/数据结构和算法.json","keywords":null,"cover":null,"content":"<p>程序 &#x3D; 数据结构 + 算法</p>\n<h1 id=\"数据结构绪论\"><a href=\"#数据结构绪论\" class=\"headerlink\" title=\"数据结构绪论\"></a>数据结构绪论</h1><p>数据结构：是相互之间存在一种或多种特定关系的数据元素的集合。</p>\n<h2 id=\"数据结构概述\"><a href=\"#数据结构概述\" class=\"headerlink\" title=\"数据结构概述\"></a>数据结构概述</h2><p>早期计算机主要用于数值运算，只要得到数学方程即可。随着计算机的发展，计算机越来越多的应用于非数值计算，就需要从具体问题中抽象出数据模型，设计出此数据模型的算法，在编写程序。</p>\n<p><strong>数据结构是一门研究非数值计算的程序设计问题中的操作对象，以及它们之间的关系和操作等相关问题的学科。</strong></p>\n<h2 id=\"基本概念和术语\"><a href=\"#基本概念和术语\" class=\"headerlink\" title=\"基本概念和术语\"></a>基本概念和术语</h2><h3 id=\"数据\"><a href=\"#数据\" class=\"headerlink\" title=\"数据\"></a>数据</h3><p><strong>数据是描述客观事物的符号，是计算机中可以操作的对象，是能被计算机识别，并输入到计算机处理的符号集合。</strong>数据不仅仅包括整型，实数等数值类型，号包括声音，图像，视频等非数值类型。</p>\n<p>数据需要具备两个前提：</p>\n<ul>\n<li>可以输入到计算机中</li>\n<li>可以被计算机程序处理</li>\n</ul>\n<h3 id=\"数据元素\"><a href=\"#数据元素\" class=\"headerlink\" title=\"数据元素\"></a>数据元素</h3><p><strong>数据元素是组成数据的，有一定意义的基本单位。在计算机中通常作为整体处理。也被称为记录。</strong></p>\n<h3 id=\"数据项\"><a href=\"#数据项\" class=\"headerlink\" title=\"数据项\"></a>数据项</h3><p><strong>一个数据元素可以由若干个数据项组成。数据项是数据不可分割的最小单位。</strong></p>\n<h3 id=\"数据对象\"><a href=\"#数据对象\" class=\"headerlink\" title=\"数据对象\"></a>数据对象</h3><p>数据对象是性质相同的数据元素的集合，是数据的子集。</p>\n<h3 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h3><p>结构，简单的理解就是关系。不同数据元素之间不是独立的，而是存在特定关系的，我们将这些关系称为结构。</p>\n<p><strong>数据结构就是相互之间存在一种或多种特定关系的数据元素的集合。</strong></p>\n<p>在计算机中，数据元素并不是孤立，杂乱无序的，而是具有内在联系的数据集合。数据元素之间存在一种或多种特定关系，也就是数据的组织形式。</p>\n<p>‍</p>\n<h2 id=\"逻辑结构与物理结构\"><a href=\"#逻辑结构与物理结构\" class=\"headerlink\" title=\"逻辑结构与物理结构\"></a>逻辑结构与物理结构</h2><h3 id=\"逻辑结构\"><a href=\"#逻辑结构\" class=\"headerlink\" title=\"逻辑结构\"></a>逻辑结构</h3><p><strong>逻辑结构是指数据对象中元素之间的相互关系。</strong>逻辑结构分为以下四种：</p>\n<ol>\n<li><p>集合结构</p>\n<p> 集合结构：集合结构中的数据元素除了同属于一个集合外，它们之间没有其他关系。</p>\n</li>\n<li><p>线性结构</p>\n<p> 线性结构：线性结构中的数据元素之间是一对一的关系。</p>\n</li>\n<li><p>树形结构</p>\n<p> 树形结构：树型结构中的数据元素之间存在一种一对多的层次关系。</p>\n</li>\n<li><p>图形结构</p>\n<p> 图形结构：图形结构的数据元素是多对多的关系。</p>\n</li>\n</ol>\n<p>‍</p>\n<h3 id=\"物理结构\"><a href=\"#物理结构\" class=\"headerlink\" title=\"物理结构\"></a>物理结构</h3><p><strong>物理结构是指数据的逻辑结构在计算机中的存储形式（在很多书中也叫存储结构）。</strong></p>\n<p>数据元素的存储结构形式有两种：顺序存储和链式存储：</p>\n<ol>\n<li><p>顺序存储结构</p>\n<p> 顺序存储结构：是把数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一样的。</p>\n<p> 顺序存储结构可以理解为排队占位，每个人占一小块空间，谁也不能插队。</p>\n</li>\n<li><p>链式存储结构</p>\n<p> 在实际排队中，总会有人插队，有人放弃排队，在这种时常要变化的情况下，顺序存储是不科学的。</p>\n<p> 链式存储结构：是把数据元素存放在任意的存储单元里，这组存储单元可以是连续的，也可以是不连续的。</p>\n<p> 数据元素存储的关系并不能反映其逻辑关系，因此需要一个指针来存放数据元素的地址，这样就可以通过地址来找到相关联数据元素的位置。</p>\n</li>\n</ol>\n<p>‍</p>\n<h2 id=\"抽象数据类型\"><a href=\"#抽象数据类型\" class=\"headerlink\" title=\"抽象数据类型\"></a>抽象数据类型</h2><h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><p>数据类型是指一组性质相同的值的集合以及定义在此集合上的一些操作的总称。</p>\n<h3 id=\"抽象数据类型-1\"><a href=\"#抽象数据类型-1\" class=\"headerlink\" title=\"抽象数据类型\"></a>抽象数据类型</h3><p>抽象数据类型（Abstract Data Type，ADT）：是指一个数学模型以及定义在该模型上的一组操作。</p>\n<p>抽象的意义在于数据类型的数学抽象特性。抽象数据类型体现了程序中问题分解，抽象和信息隐藏的特性。</p>\n<p>‍</p>\n<h1 id=\"算法绪论\"><a href=\"#算法绪论\" class=\"headerlink\" title=\"算法绪论\"></a>算法绪论</h1><p>算法是解决特定问题求解步骤的描述，在计算机中表现为指令的有限序列，并且每条指令表示一个或多个操作。</p>\n<p>‍</p>\n<h2 id=\"算法的特性\"><a href=\"#算法的特性\" class=\"headerlink\" title=\"算法的特性\"></a>算法的特性</h2><p>算法具有五个基本特性：输入，输出，有穷性，确定性和可行性。</p>\n<h3 id=\"输入输出\"><a href=\"#输入输出\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h3><p>算法具有零个或多个输入。算法至少有一个或多个输入。如果没有输出，这个算法就毫无意义。</p>\n<h3 id=\"有穷性\"><a href=\"#有穷性\" class=\"headerlink\" title=\"有穷性\"></a>有穷性</h3><p>有穷性指算法在执行有限的步骤之后，自动结束而不会出现无限循环，并且每个步骤在可接受的时间内完成。</p>\n<h3 id=\"确定性\"><a href=\"#确定性\" class=\"headerlink\" title=\"确定性\"></a>确定性</h3><p>算法的每一步骤都具有确定的含义，不会出现二义性。算法在一定的条件下，只有一条执行路径，相同的输入只能有唯一的输出结果。</p>\n<h3 id=\"可行性\"><a href=\"#可行性\" class=\"headerlink\" title=\"可行性\"></a>可行性</h3><p>算法的每一步必须是可行的，每一步都能够通过执行有限次数完成。</p>\n<p>‍</p>\n<h2 id=\"算法的设计要求\"><a href=\"#算法的设计要求\" class=\"headerlink\" title=\"算法的设计要求\"></a>算法的设计要求</h2><p>算法不是唯一的，解决同一问题可以有多种算法。多种算法中会有相对较好的算法。</p>\n<p>好的算法所具有的特征：正确性，可读性，健壮性，高效率和低存储量。</p>\n<h3 id=\"正确性\"><a href=\"#正确性\" class=\"headerlink\" title=\"正确性\"></a>正确性</h3><p>算法的正确性是指算法执行应该具有输入，输出和加工处理无歧义性，能正确反映问题的需求，能够得到问题的正确答案。</p>\n<p>算法的正确大体分为以下四个层次：</p>\n<ol>\n<li>算法的程序没有语法错误</li>\n<li>算法程序对于合法的输入数据能够产生满足要求的输出结果</li>\n<li>算法程序对于非法的输入数据能够得出满足规格说明的结果</li>\n<li>算法程序对于精心选择的，甚至刁难的测试数据都有满足要求的输出结果</li>\n</ol>\n<h3 id=\"可读性\"><a href=\"#可读性\" class=\"headerlink\" title=\"可读性\"></a>可读性</h3><p>算法设计的另一目的是为了便于阅读，理解和交流。可读性有助于人们理解算法，晦涩难懂的算法往往隐含错误，不易被发现，并且难于调试和修改。</p>\n<h3 id=\"健壮性\"><a href=\"#健壮性\" class=\"headerlink\" title=\"健壮性\"></a>健壮性</h3><p>当输入数据不合法时，算法也能做出相关处理，而不是产生异常或者莫名其妙的结果。</p>\n<h3 id=\"时间效率高和存储量低\"><a href=\"#时间效率高和存储量低\" class=\"headerlink\" title=\"时间效率高和存储量低\"></a>时间效率高和存储量低</h3><p>对于同一个问题，如果有多个算法可以解决，执行时间短的算法效率高，不然反之。存储量需求指的是算法在执行过程中所需要的最大存储空间，主要指算法运行过程中所需要的内存或外部硬盘存储空间。</p>\n<p>‍</p>\n<h2 id=\"算法效率的度量方法\"><a href=\"#算法效率的度量方法\" class=\"headerlink\" title=\"算法效率的度量方法\"></a>算法效率的度量方法</h2><p>‍</p>\n<p>‍</p>\n<h2 id=\"函数的渐近增长\"><a href=\"#函数的渐近增长\" class=\"headerlink\" title=\"函数的渐近增长\"></a>函数的渐近增长</h2><p>‍</p>\n<h2 id=\"算法时间复杂度\"><a href=\"#算法时间复杂度\" class=\"headerlink\" title=\"算法时间复杂度\"></a>算法时间复杂度</h2><p>‍</p>\n<p>‍</p>\n<h2 id=\"常见的时间复杂度\"><a href=\"#常见的时间复杂度\" class=\"headerlink\" title=\"常见的时间复杂度\"></a>常见的时间复杂度</h2><p>‍</p>\n<h2 id=\"最坏情况与平均情况\"><a href=\"#最坏情况与平均情况\" class=\"headerlink\" title=\"最坏情况与平均情况\"></a>最坏情况与平均情况</h2><p>‍</p>\n<h2 id=\"算法空间复杂度\"><a href=\"#算法空间复杂度\" class=\"headerlink\" title=\"算法空间复杂度\"></a>算法空间复杂度</h2><p>‍</p>\n<h1 id=\"线性表\"><a href=\"#线性表\" class=\"headerlink\" title=\"线性表\"></a>线性表</h1><p>零个或多个数据元素的有限序列。</p>\n<h2 id=\"线性表的定义\"><a href=\"#线性表的定义\" class=\"headerlink\" title=\"线性表的定义\"></a>线性表的定义</h2><p>‍</p>\n<p>‍</p>\n","text":"程序 &#x3D; 数据结构 + 算法 数据结构绪论数据结构：是相互之间存在一种或多种特定关系的数据元素的集合。 数据结构概述早期计算机主要用于数值运算，只要得到数学方程即可。随着计算机的发展，计算机越来越多的应用于非数值计算，就需要从具体问题中抽象出数据模型，设计出此数据模型的...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"计算机专业课","slug":"计算机专业课","count":4,"path":"api/categories/计算机专业课.json"}],"tags":[{"name":"编程四大件","slug":"编程四大件","count":4,"path":"api/tags/编程四大件.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%BB%AA%E8%AE%BA\"><span class=\"toc-text\">数据结构绪论</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E6%A6%82%E8%BF%B0\"><span class=\"toc-text\">数据结构概述</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%92%8C%E6%9C%AF%E8%AF%AD\"><span class=\"toc-text\">基本概念和术语</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">数据</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">数据元素</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E9%A1%B9\"><span class=\"toc-text\">数据项</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E5%AF%B9%E8%B1%A1\"><span class=\"toc-text\">数据对象</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">数据结构</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%80%BB%E8%BE%91%E7%BB%93%E6%9E%84%E4%B8%8E%E7%89%A9%E7%90%86%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">逻辑结构与物理结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%80%BB%E8%BE%91%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">逻辑结构</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%89%A9%E7%90%86%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">物理结构</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">抽象数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">数据类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-1\"><span class=\"toc-text\">抽象数据类型</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E7%BB%AA%E8%AE%BA\"><span class=\"toc-text\">算法绪论</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E7%9A%84%E7%89%B9%E6%80%A7\"><span class=\"toc-text\">算法的特性</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA\"><span class=\"toc-text\">输入输出</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%89%E7%A9%B7%E6%80%A7\"><span class=\"toc-text\">有穷性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%A1%AE%E5%AE%9A%E6%80%A7\"><span class=\"toc-text\">确定性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%AF%E8%A1%8C%E6%80%A7\"><span class=\"toc-text\">可行性</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E7%9A%84%E8%AE%BE%E8%AE%A1%E8%A6%81%E6%B1%82\"><span class=\"toc-text\">算法的设计要求</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%AD%A3%E7%A1%AE%E6%80%A7\"><span class=\"toc-text\">正确性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%AF%E8%AF%BB%E6%80%A7\"><span class=\"toc-text\">可读性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%81%A5%E5%A3%AE%E6%80%A7\"><span class=\"toc-text\">健壮性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%97%B6%E9%97%B4%E6%95%88%E7%8E%87%E9%AB%98%E5%92%8C%E5%AD%98%E5%82%A8%E9%87%8F%E4%BD%8E\"><span class=\"toc-text\">时间效率高和存储量低</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E6%95%88%E7%8E%87%E7%9A%84%E5%BA%A6%E9%87%8F%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">算法效率的度量方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E7%9A%84%E6%B8%90%E8%BF%91%E5%A2%9E%E9%95%BF\"><span class=\"toc-text\">函数的渐近增长</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6\"><span class=\"toc-text\">算法时间复杂度</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B8%B8%E8%A7%81%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6\"><span class=\"toc-text\">常见的时间复杂度</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%80%E5%9D%8F%E6%83%85%E5%86%B5%E4%B8%8E%E5%B9%B3%E5%9D%87%E6%83%85%E5%86%B5\"><span class=\"toc-text\">最坏情况与平均情况</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6\"><span class=\"toc-text\">算法空间复杂度</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E6%80%A7%E8%A1%A8\"><span class=\"toc-text\">线性表</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%9A%84%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">线性表的定义</span></a></li></ol></li></ol>","author":{"name":"Hyc","slug":"blog-author","avatar":"https://blog-imgs-1307507646.cos.ap-beijing.myqcloud.com/%E5%A4%B4%E5%83%8F/head.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"操作系统","uid":"8c6c59136f9c0c8c29b87ea646eed9d1","slug":"计算机专业课/操作系统","date":"2019-06-19T16:00:00.000Z","updated":"2023-02-04T10:29:55.813Z","comments":true,"path":"api/articles/计算机专业课/操作系统.json","keywords":null,"cover":null,"text":"‍ ","link":"","photos":[],"count_time":{"symbolsCount":2,"symbolsTime":"1 mins."},"categories":[{"name":"计算机专业课","slug":"计算机专业课","count":4,"path":"api/categories/计算机专业课.json"}],"tags":[{"name":"编程四大件","slug":"编程四大件","count":4,"path":"api/tags/编程四大件.json"}],"author":{"name":"Hyc","slug":"blog-author","avatar":"https://blog-imgs-1307507646.cos.ap-beijing.myqcloud.com/%E5%A4%B4%E5%83%8F/head.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"设计模式","uid":"deffdaaa2a24a19ee257667b3b36743c","slug":"计算机专业课/设计模式","date":"2019-06-19T16:00:00.000Z","updated":"2023-02-04T10:30:37.206Z","comments":true,"path":"api/articles/计算机专业课/设计模式.json","keywords":null,"cover":null,"text":"设计模式概述软件设计模式，又称设计模式，是一套被反复使用，多输入知晓的，经过分类编目的，代码设计经验的总结。它描述了在软件设计过程中的一些不断重复发生的问题，以及该问题的解决方案。也就是说，它是解决特定问题的一系列套路，是前辈们的代码设计经验的总结，具有一定的普遍性，可以反复使用...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"计算机专业课","slug":"计算机专业课","count":4,"path":"api/categories/计算机专业课.json"}],"tags":[{"name":"编程四大件","slug":"编程四大件","count":4,"path":"api/tags/编程四大件.json"}],"author":{"name":"Hyc","slug":"blog-author","avatar":"https://blog-imgs-1307507646.cos.ap-beijing.myqcloud.com/%E5%A4%B4%E5%83%8F/head.jpg","link":"/","description":"","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}